<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Liangdi&#39;s Blog</title>
        <link>https://example.com/post/</link>
        <description>Recent content in Posts on Liangdi&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 23 Apr 2022 16:59:14 +0800</lastBuildDate><atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>渐进式云原生实践: 使用 podman 容器化你的应用</title>
        <link>https://example.com/p/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8-podman-%E5%AE%B9%E5%99%A8%E5%8C%96%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <pubDate>Sat, 23 Apr 2022 16:59:14 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8-podman-%E5%AE%B9%E5%99%A8%E5%8C%96%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        <description>&lt;h2 id=&#34;何为云原生&#34;&gt;何为云原生&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;云原生&lt;/code&gt;一词可谓是大红大紫, 老板见面不说一下都觉得落伍了,技术人员更是要与时俱进,学习这&lt;code&gt;一系列&lt;/code&gt;的新技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看看 &lt;a class=&#34;link&#34; href=&#34;cncf.io&#34; &gt;CNCF&lt;/a&gt; 对云原生的最新定义,注意&lt;code&gt;云原生&lt;/code&gt;的定义一直是演进的,随着新技术,新架构的发展,定义也会变化.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上这两段话来自 CNCF 的&lt;a class=&#34;link&#34; href=&#34;https://github.com/cncf/toc/blob/main/DEFINITION.md#%E4%B8%AD%E6%96%87%E7%89%88%E6%9C%AC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;云原生定义&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;简单的说就是用各种技术实现了大多数人梦寐以求的理想系统方案!&lt;/p&gt;
&lt;p&gt;但是,如果一个传统技术栈的团队,要向&lt;code&gt;云原生&lt;/code&gt;迁移,代价会是多大呢? 这是个值得思考的问题.&lt;/p&gt;
&lt;p&gt;CNCF 有两个子站点 &lt;a class=&#34;link&#34; href=&#34;https://glossary.cncf.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://glossary.cncf.io/&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://landscape.cncf.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://landscape.cncf.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这两个站点可以大致了解&lt;code&gt;云原生&lt;/code&gt;涉及到新概念以及生态图谱, 如此多的概念和繁杂的生态,对于传统技术团队来说将会带来额外的心智负担以及新的挑战.&lt;/p&gt;
&lt;h2 id=&#34;渐进式云原生&#34;&gt;渐进式云原生&lt;/h2&gt;
&lt;p&gt;因此针对我们小团队以及小部门,我提出了&lt;code&gt;渐进式云原生&lt;/code&gt; 和 &lt;code&gt;轻量化云原生&lt;/code&gt; 的概念,以便云原生落地.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;渐进式云原生&lt;/code&gt; 是指自下往上,分阶段完成云原生迁移和落地. 这里大概会包含 &lt;code&gt;容器化&lt;/code&gt;, &lt;code&gt;微服务化&lt;/code&gt; , &lt;code&gt;DevOps&lt;/code&gt; ,&lt;code&gt;CI/DI&lt;/code&gt; 等方面向云端迁移, 而且不强调顺序, 实际的顺序大多数根团队的技术栈相关.&lt;/p&gt;
&lt;p&gt;所以这系列应该不会出现一来就叫你部署一套 &lt;code&gt;k8s&lt;/code&gt; 集群, 可能到最后也不会,而是取决于你自己的选择.&lt;/p&gt;
&lt;p&gt;这一系列就是一次渐进式云原生的实践,废话一大推,我们进入正题&lt;/p&gt;
&lt;h2 id=&#34;使用-podman-容器化你的应用&#34;&gt;使用 podman 容器化你的应用&lt;/h2&gt;
&lt;p&gt;第一篇是&lt;code&gt;使用 podman 容器化你的应用&lt;/code&gt; , 我认为容器化是迈向云原生过程中最简单的部分, 技术也成熟,风险不大. 这里为什么选择 &lt;code&gt;podman&lt;/code&gt; ,详谈的话,需要再开一篇文章.&lt;/p&gt;
&lt;h3 id=&#34;实践目标&#34;&gt;实践目标&lt;/h3&gt;
&lt;p&gt;将一个传统的项目 CentOS -&amp;gt; Nginx -&amp;gt; (Spring Boot, MySQL, Redis) 容器化&lt;/p&gt;
&lt;p&gt;原项目是一个不算复杂的 Spring Boot 应用, 由于 Java 没法热更新, 所以使用 Nginx 反向代理了两套 Spring Boot 应用(两套应用可以同时运行也可以只运行一套), 关键时刻可实现用户无感知更新.&lt;/p&gt;
&lt;p&gt;两套 Spring Boot 应用监听不同端口, 使用 Systemd 作为系统服务配置, 上传新 jar 包后, 重启一个项目后, 再重启另外一个项目, 可以通过简单脚本实现.&lt;/p&gt;
&lt;p&gt;前端静态页面&lt;/p&gt;
&lt;p&gt;拓扑图如下:
&lt;img src=&#34;https://example.com/p/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8-podman-%E5%AE%B9%E5%99%A8%E5%8C%96%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/assets/podman/topology-centos.png&#34;
	width=&#34;1008&#34;
	height=&#34;834&#34;
	srcset=&#34;https://example.com/p/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8-podman-%E5%AE%B9%E5%99%A8%E5%8C%96%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/assets/podman/topology-centos_hu17cd03f73cff741eba97e5b97641a5a6_32682_480x0_resize_box_3.png 480w, https://example.com/p/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8-podman-%E5%AE%B9%E5%99%A8%E5%8C%96%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/assets/podman/topology-centos_hu17cd03f73cff741eba97e5b97641a5a6_32682_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;传统架构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;290px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;实践过程&#34;&gt;实践过程&lt;/h3&gt;
&lt;h4 id=&#34;系统和-podman-的版本选择&#34;&gt;系统和 podman 的版本选择&lt;/h4&gt;
&lt;p&gt;原先部署在 CentOS 8 上, 这次容器化对 HOST 系统就没有特别的要求了, 所以选择了 Fedora Server, 三个原因: 一, 本人工作电脑使用 Fedora . 二, 容器技术依赖于 Linux 内核的 cgroup 和 namespace 技术,新内核会比老内核有优势, 虽然 Fedora 内核很新, 但是我相信 Linux 内核的稳定性. 三, CentOS 已经不再维护.&lt;/p&gt;
&lt;p&gt;Podman 我选择了最新的 4.0.x, 它和 3.x 版本不兼容功能, 但是使用上不会有差别, 主要是网络功能默认使用了 &lt;code&gt;netavark&lt;/code&gt; 和 &lt;code&gt;aardvark-dns&lt;/code&gt; ,没有使用 cni, 这两个工具是用 &lt;code&gt;rust&lt;/code&gt; 编写的, 这也是我去尝试的主要原因之一&lt;/p&gt;
&lt;p&gt;容器使用选择 &lt;code&gt;rootfull&lt;/code&gt; 还是 &lt;code&gt;rootless&lt;/code&gt; , 我这里选择 &lt;code&gt;root&lt;/code&gt; 运行, &lt;code&gt;rootless&lt;/code&gt; 其实问题也不大,我测试除了没法 ping, 80/443端口等问题外, 还有一个不算特别大的问题就是, 容器创建好后无法再加入网络,需要创建的时候指定网络, &lt;code&gt;root&lt;/code&gt; 情况下没问题.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;禁用 selinux
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;安装-podman&#34;&gt;安装 podman&lt;/h4&gt;
&lt;p&gt;fedora 中安装 podman 很简单&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo dnf copr &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; rhcontainerbot/podman4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo dnf install podman
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果是安装 3.x 的版本, 还需要额外安装 &lt;code&gt;podman-plugins&lt;/code&gt; 包,以实现 cni 网络的 dns 服务功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo dnf install podman
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo dnf install podman-plugins
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在使用上版本 4 和版本 3 没有直接区别&lt;/p&gt;
&lt;h4 id=&#34;新的拓扑架构&#34;&gt;新的拓扑架构&lt;/h4&gt;
&lt;p&gt;还没有完全想好 nginx 这个前端代理以及前端静态页面是否要容器化,所以这里先保留之前的部署方案,拓扑图如下:
&lt;img src=&#34;https://example.com/p/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8-podman-%E5%AE%B9%E5%99%A8%E5%8C%96%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/assets/podman/topology-container.png&#34;
	width=&#34;1008&#34;
	height=&#34;834&#34;
	srcset=&#34;https://example.com/p/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8-podman-%E5%AE%B9%E5%99%A8%E5%8C%96%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/assets/podman/topology-container_hu014f1fc03311151c148de2fdf829b7af_44215_480x0_resize_box_3.png 480w, https://example.com/p/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8-podman-%E5%AE%B9%E5%99%A8%E5%8C%96%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/assets/podman/topology-container_hu014f1fc03311151c148de2fdf829b7af_44215_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;传统架构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;290px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;创建容器网络和基础容器&#34;&gt;创建容器网络和基础容器&lt;/h4&gt;
&lt;p&gt;根据新的拓扑设计, Spring Boot 应用, MySQL , Redis 将会是以独立容器存在,所以需要创建一个网络将他们链接.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建名为 prod 的容器网络&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;podman network create prod
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看网络&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;podman network ls
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 之后创建或者运行容器的时候使用 --net prod 即可将容器加入到这个网络中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;redis 容器&lt;/p&gt;
&lt;p&gt;使用以下命令创建 redis 容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;podman run -d --name redis --net prod redis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;podman 支持多镜像服务器 , 所以如果不指定镜像服务器, 会让你选择, 一般选择 dokcer.io 的即可&lt;/p&gt;
&lt;p&gt;注意: 上面使用 &amp;ndash;net prod 将 redis 容器加入到网络中, 同时指定了名字 &lt;code&gt;redis&lt;/code&gt; , 这样网络中的主机名会是 &lt;code&gt;redis&lt;/code&gt; , 也可以使用  &amp;ndash;hostname 参数&lt;/p&gt;
&lt;p&gt;注意2: 上面的命令没有使用 -p 6379:6379 将 redis 端口暴露出来,因为我们的 Spring Boot 应用也会加入到 prod 网络中,内网是可以访问的,所以不需要暴露出来.&lt;/p&gt;
&lt;p&gt;可以使用以下命令测试 redis 容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;podman &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it redis redis-cli PING
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 正常返回 PONG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 也可以进入容器 bash 测试&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;podman &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it redis bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;mysql 容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;podman run &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -e &lt;span class=&#34;nv&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12345678&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --net prod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -v /opt/deploy/mysql/data:/var/lib/mysql &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --name mysql -d mysql:8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;-e MYSQL_ROOT_PASSWORD=12345678&lt;/code&gt; 指定了容器中 mysql root 用户的密码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-v /opt/deploy/mysql/data:/var/lib/mysql&lt;/code&gt; 将 host 机器 /opt/&amp;hellip;./data 目录挂载到容器中 &lt;code&gt;/var/lib/mysql&lt;/code&gt; 中, 这样 mysql 数据才能正常保存,如果缺少这个, 容器重启后, 数据将会被重置.&lt;/p&gt;
&lt;p&gt;更多配置查看 &lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/_/mysql&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hub.docker.com/_/mysql&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;创建-spring-boot-容器&#34;&gt;创建 Spring Boot 容器&lt;/h4&gt;
&lt;p&gt;应用容器比较特殊,因为是内部应用, 也没法将应用发布到公共镜像上, 正常的流程是将应用打包,发布到私有镜像服务器中,再在 podman 中使用, 这里先跳过这一步,不然内容太多了!!!&lt;/p&gt;
&lt;p&gt;我这里创建了一个公共镜像 &lt;a class=&#34;link&#34; href=&#34;https://github.com/Liangdi/spring-boot-launcher&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Liangdi/spring-boot-launcher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个镜像主要就是 jdk 环境,可以通过配置端口和 jar 名称,运行指定的 Spring Boot 项目&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建端口为 9090 的 Spring Boot 应用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;podman run -d --name sprin-boot-app-&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-v /opt/deploy/app/:/deploy &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;APP_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--net prod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-p &lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;docker.io/liangdi/spring-boot-launcher
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建端口为 9091 的 Spring Boot 应用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9091&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;podman run -d --name sprin-boot-app-&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-v /opt/deploy/app/:/deploy &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;APP_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--net prod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-p &lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;docker.io/liangdi/spring-boot-launcher
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Spring Boot 应用容器化后,只需要将原先 mysql , redis 的链接配置修改一下即可, 原先是使用 127.0.0.1, 容器化后,改为容器主机名 &lt;code&gt;mysql&lt;/code&gt; 和 &lt;code&gt;redis&lt;/code&gt; 即可.&lt;/p&gt;
&lt;p&gt;Nginx 反向代理和前端静态文件方面,没有去改动.&lt;/p&gt;
&lt;p&gt;到此, 此次 Spring Boot 应用基本容器化完成, 后续就是要将应用&lt;code&gt;微服务化&lt;/code&gt;了. 伴随着&lt;code&gt;渐进式云原生&lt;/code&gt;,可能在运维,测试,客户交付方面也会有所改变.&lt;/p&gt;
&lt;h4 id=&#34;创建-systemd-服务&#34;&gt;创建 systemd 服务&lt;/h4&gt;
&lt;p&gt;使用 podman generate systemd  创建 sytemd service, 具体看文档 &lt;code&gt;https://docs.podman.io/en/latest/markdown/podman-generate-systemd.1.html&lt;/code&gt; , 这里不再说明.&lt;/p&gt;
&lt;h2 id=&#34;容器化总结&#34;&gt;容器化总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本的容器化,程序开发上不需要有改变, 只是简单修改 prod 的配置文件&lt;/li&gt;
&lt;li&gt;运维人员工作流程基本没变&lt;/li&gt;
&lt;li&gt;podman 基本兼容 docker 命令,所以有 docker 经验将很容易上手.&lt;/li&gt;
&lt;li&gt;静态页面需不需要容器化,值的思考,如果是大流量应用, 静态页面肯定是 CDN , 如果是小应用, 那么多开一个容器多起一个静态服务器是否又是浪费? 我这次没有将静态页面容器化. 后续有新想法后再迭代&lt;/li&gt;
&lt;li&gt;podman 中还有 pod 管理功能,这也是我选择 podman 的原因之一,这方面将会在下次容器有化中使用.&lt;/li&gt;
&lt;li&gt;这次交付产物使用 -v 路径的方式告知容器,后续可以使用命名 volume 替代.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
