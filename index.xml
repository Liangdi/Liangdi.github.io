<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Liangdi&#39;s个人博客</title>
    <link>https://liangdi.me/</link>
    <description>Recent content on Liangdi&#39;s个人博客</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 28 Jan 2023 01:33:57 +0800</lastBuildDate>
    <atom:link href="https://liangdi.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2023 年可以关注的 Rust Web 框架(后端)</title>
      <link>https://liangdi.me/posts/2023-rust-web-frameworks/</link>
      <pubDate>Sat, 28 Jan 2023 01:33:57 +0800</pubDate>
      <guid>https://liangdi.me/posts/2023-rust-web-frameworks/</guid>
      <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;&#xA;&lt;p&gt;Rust 生态慢慢发展壮大，虽然有 areweyet 系列网站可以查看一些领域的情况，但是我最近关注的 web framework 领域的 &lt;a href=&#34;https://www.arewewebyet.org/&#34;&gt;https://www.arewewebyet.org/&lt;/a&gt; 却不怎么更新了， 那么为就自己来收集一下最新的信息，本文只是收集一些活跃的项目， 不分排名，不做推荐，如果有机会花点时间去做点技术调研，再做推荐。&lt;/p&gt;&#xA;&lt;p&gt;如果项目缺失，也欢迎大家补充&lt;/p&gt;&#xA;&lt;h1 id=&#34;项目列表后端框架&#34;&gt;项目列表(后端框架)&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;actix-web &lt;a href=&#34;https://actix.rs/&#34;&gt;https://actix.rs/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;axum &lt;a href=&#34;https://github.com/tokio-rs/axum&#34;&gt;https://github.com/tokio-rs/axum&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;warp &lt;a href=&#34;https://github.com/seanmonstar/warp&#34;&gt;https://github.com/seanmonstar/warp&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;viz &lt;a href=&#34;https://viz.rs/&#34;&gt;https://viz.rs/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;salvo &lt;a href=&#34;https://salvo.rs/&#34;&gt;https://salvo.rs/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;iron &lt;a href=&#34;https://github.com/iron/iron&#34;&gt;https://github.com/iron/iron&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;tide &lt;a href=&#34;https://github.com/http-rs/tide&#34;&gt;https://github.com/http-rs/tide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;nickel &lt;a href=&#34;https://github.com/nickel-org/nickel.rs&#34;&gt;https://github.com/nickel-org/nickel.rs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;gotham &lt;a href=&#34;https://gotham.rs/&#34;&gt;https://gotham.rs/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;poem &lt;a href=&#34;https://github.com/poem-web/poem&#34;&gt;https://github.com/poem-web/poem&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;thruster &lt;a href=&#34;https://github.com/thruster-rs/Thruster&#34;&gt;https://github.com/thruster-rs/Thruster&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;rouille &lt;a href=&#34;https://github.com/tomaka/rouille&#34;&gt;https://github.com/tomaka/rouille&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;trillium &lt;a href=&#34;https://github.com/trillium-rs/trillium&#34;&gt;https://github.com/trillium-rs/trillium&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;rocket &lt;a href=&#34;https://rocket.rs/&#34;&gt;https://rocket.rs/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;项目列表全栈类&#34;&gt;项目列表(全栈类)&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Fresh &lt;a href=&#34;https://fresh.deno.dev/&#34;&gt;https://fresh.deno.dev/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;MoonZoon &lt;a href=&#34;https://github.com/MoonZoon/MoonZoon&#34;&gt;https://github.com/MoonZoon/MoonZoon&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;anansi &lt;a href=&#34;https://github.com/saru-tora/anansi&#34;&gt;https://github.com/saru-tora/anansi&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;github-star-情况选取部分&#34;&gt;github star 情况(选取部分)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;后端框架&#34;&gt;后端框架&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/star-history-1.png&#34; alt=&#34;后端框架&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;全栈类&#34;&gt;全栈类&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/star-history-2.png&#34; alt=&#34;全栈类&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 项目鉴赏: zellij 替代 screen, tmux 的终端工具</title>
      <link>https://liangdi.me/posts/rust-project-review-zellij/</link>
      <pubDate>Mon, 23 Jan 2023 21:44:12 +0800</pubDate>
      <guid>https://liangdi.me/posts/rust-project-review-zellij/</guid>
      <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;&#xA;&lt;p&gt;zellij 是最近用于替代 tmux 的工具，使用 rust 编写 &lt;a href=&#34;https://zellij.dev/&#34;&gt;https://zellij.dev/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;zellij 名称的直译大概是马赛克瓷砖的意思， 项目原先名称直接就叫：Mosaic&lt;/p&gt;&#xA;&lt;p&gt;从名字看，它运行起来应该有点马赛克瓷砖，一块一块的样子，运行截图如下&#xA;&lt;img src=&#34;assets/zellij-screen.png&#34; alt=&#34;Zellij 截图&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;特点&#34;&gt;特点&lt;/h1&gt;&#xA;&lt;p&gt;阐述 zellij 的特点之前，先看看官方的 roadmap 的内容，随着时间变化，可能会有不同，不过大体能了解到官方的一些理念&#xA;&lt;img src=&#34;assets/zellij-roadmap.png&#34; alt=&#34;Zellij Raodmap&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;网址:&lt;a href=&#34;https://zellij.dev/roadmap/&#34;&gt;https://zellij.dev/roadmap/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;用户体验&#34;&gt;用户体验&lt;/h2&gt;&#xA;&lt;p&gt;Zellij 很注重用户体验，包括终端用户，以及开发者，终端用户层面， zellij 做到了开箱即用，无需过多的学习， zellij 默认支持 tab ， 快捷键默认呈现，并且有下一步操作提示， 默认可以使用鼠标激活 pane, 支持快捷键切换 pane 和 tab ，这样的默认配置用户基本无成本上手， 相比 tmux 好太多， 记得当初使用 tmux 第一步就是去搜索如何显示快捷键，如何使用快捷键&amp;hellip;&#xA;&lt;img src=&#34;assets/zellij-keymap-1.png&#34; alt=&#34;zellij keymap&#34;&gt;&#xA;&lt;img src=&#34;assets/zellij-keymap-2.png&#34; alt=&#34;zellij keymap&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Zellij 的键盘操作新手无需学习即可理解， 类似的设计在很多用户友好的软件中都有体现了，下图是 Blender 的操作界面&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/blender.png&#34; alt=&#34;zellij keymap&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;layout-系统&#34;&gt;layout 系统&lt;/h2&gt;&#xA;&lt;p&gt;Zellij 设计了一个 layout 系统， 用户可以设置不同的配置文件（kdl 格式）&lt;a href=&#34;https://kdl.dev/&#34;&gt;https://kdl.dev/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;kdl 确实很适合描述复杂的配置，类似 ron &lt;a href=&#34;https://github.com/ron-rs/ron&#34;&gt;https://github.com/ron-rs/ron&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;我测试了几个 layout 配置以及运行效果如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;monitor.kdl&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;layout {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pane split_direction&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vertical&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pane command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;htop&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// panes can have arguments on the same line&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pane command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;btm&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pane command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nu&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;assets/zellij-monitor.png&#34; alt=&#34;monitor.kdl&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 黑客编程 - SYN Flood 敲开 DDoS 的大门</title>
      <link>https://liangdi.me/posts/rust-hacking-programing-syn-flood-ddos/</link>
      <pubDate>Fri, 03 Jun 2022 16:01:32 +0800</pubDate>
      <guid>https://liangdi.me/posts/rust-hacking-programing-syn-flood-ddos/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;DDoS 介绍: &lt;a href=&#34;https://www.cloudflare.com/zh-cn/learning/ddos/what-is-a-ddos-attack/&#34;&gt;https://www.cloudflare.com/zh-cn/learning/ddos/what-is-a-ddos-attack/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果黑客攻击技术有层次之分, 那么 DDoS 攻击可以比喻为: 花钱请了一堆打手,攻击目标, 没有什么技术含量又有效果,目标也要付出不少成本才能防护的了.&lt;/p&gt;&#xA;&lt;p&gt;那 Rust 能编写 DDoS 软件吗? 答案当然是可以的,基本上所有语言都可以编写.&lt;/p&gt;&#xA;&lt;p&gt;DDoS 工具说到底就是充分利用了网络协议的标准, 然后不讲道理恶意利用而以. 第一个 D, distributed , 分布式, 就不在我们今天内容的范畴了, 后面将结合其他内容一起写.&lt;/p&gt;&#xA;&lt;p&gt;DDoS 攻击大多数发生在 3,4,7 层网络, SYN Flood 就是在 TCP 协议上实现的.&lt;/p&gt;&#xA;&lt;h2 id=&#34;syn-flood-原理&#34;&gt;SYN Flood 原理&lt;/h2&gt;&#xA;&lt;p&gt;SYN Flood 介绍: &lt;a href=&#34;https://www.cloudflare.com/zh-cn/learning/ddos/syn-flood-ddos-attack/&#34;&gt;https://www.cloudflare.com/zh-cn/learning/ddos/syn-flood-ddos-attack/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;SYN 洪水攻击主要是利用 TCP 协议握手规则, 大致就是不停的只伸手, 就不和对方握手,导致对方一直准备着和你握手, 就没法完成其他正常的握手动作了.&lt;/p&gt;&#xA;&lt;p&gt;那丛技术实现原理来看, 就是不停的构建 TCP-SYN 数据包,发给目标 IP 地址, 对于目标响应的 SYN/ACK 信息不做处理, 甚至是伪造发送端 IP ,使得目标将响应的 SYN/ACK 发送到其他 IP 地址去.&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;还是使用 pnet 库 (基于 pcap)&lt;/li&gt;&#xA;&lt;li&gt;尝试伪造 IP (伪造 IP 对于公网 ISP 服务商基本都限制了,可以在内网实现).&lt;/li&gt;&#xA;&lt;li&gt;TCP 协议就不展开讲了.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;编码实现&#34;&gt;编码实现&lt;/h2&gt;&#xA;&lt;p&gt;创建项目, 并且添加基本以来 cargo add 的功能来自 cargo-edit 这个项目, 如果系统没有,可以使用 cargo install cargo-edit 安装该功能&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 黑客编程 - ICMP 协议 ping 的简单实现</title>
      <link>https://liangdi.me/posts/rust-hacking-programing-icmp-ping/</link>
      <pubDate>Thu, 02 Jun 2022 19:30:20 +0800</pubDate>
      <guid>https://liangdi.me/posts/rust-hacking-programing-icmp-ping/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;记得在高中时期打开终端, ping 一个 IP ,这个操作在别人面前就会引来仰望大神的目光.&lt;/p&gt;&#xA;&lt;p&gt;后来知道了底层是 ICMP 协议,然后就没有然后了, 仅停留在知道的层面, 入坑 Rust 以来,也没有什么特别的项目去做, 就从这方面入手,重温一下高中时期学习&amp;quot;黑客&amp;quot;技术时的热情,毕竟兴趣是最好的老师!&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;p&gt;Rust 网络操作的库,不算很多, 这里使用 pnet 这个库,基于 pcap.&lt;/p&gt;&#xA;&lt;p&gt;测试抓包工具使用 wireshark&lt;/p&gt;&#xA;&lt;h2 id=&#34;预备知识&#34;&gt;预备知识&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Wiki 参考: &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%8E%A7%E5%88%B6%E6%B6%88%E6%81%AF%E5%8D%8F%E8%AE%AE&#34;&gt;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%8E%A7%E5%88%B6%E6%B6%88%E6%81%AF%E5%8D%8F%E8%AE%AE&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;ICMP 协议属于 3 层网络, 包含在 IP 数据包中, 所以我们要构建的数据包格式: IP头部|ICMP头部|ICMP数据&lt;/li&gt;&#xA;&lt;li&gt;ICMP 报文使用 Type 和 Code 的组合区分不同的类型&lt;/li&gt;&#xA;&lt;li&gt;根据 Wiki 的说明, 程序将使用 Type = 0 的数据包(Echo Reply) 和 Type = 8 的数据包 (Echo Request)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/icmp.png&#34; alt=&#34;ICMP&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这里我们使用 IPv4 协议&lt;/p&gt;&#xA;&lt;h2 id=&#34;实现思路&#34;&gt;实现思路&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pnet 可以实现 2,3,4 层的数据包操作&lt;/li&gt;&#xA;&lt;li&gt;pnet 提供了各层数据包的协议的封装&lt;/li&gt;&#xA;&lt;li&gt;在此应用中,可以使用 &lt;code&gt;transport_channel&lt;/code&gt; 创建网络的通讯通道,使用其 rx 接收数据包, tx 发送数据包.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;编码实现&#34;&gt;编码实现&lt;/h2&gt;&#xA;&lt;p&gt;创建项目, 并且添加基本以来 cargo add 的功能来自 cargo-edit 这个项目, 如果系统没有,可以使用 cargo install cargo-edit 安装该功能&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 Podman 运行 WordPress 6 Arturo</title>
      <link>https://liangdi.me/posts/run-wordpress-6-arturo-with-podman/</link>
      <pubDate>Thu, 02 Jun 2022 12:37:58 +0800</pubDate>
      <guid>https://liangdi.me/posts/run-wordpress-6-arturo-with-podman/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;今天看到 WordPress 6 &lt;a href=&#34;https://wordpress.org/news/2022/05/arturo/&#34;&gt;发布&lt;/a&gt;了,回想多年以前在使用 WordPress 的时候,一顿 yum 命令安装 nginx, php, mysql, php-fpm , 然后再配置 nginx, 经过一阵子配置, WordPress 就运行成功了, 如今在云原生时代, 可以用 k8s , docker , Podman 等工具来安装这些系统了, 今天就使用 Podman 安装 WordPress , 人生苦短, 我用 podman !&lt;/p&gt;&#xA;&lt;h2 id=&#34;认知准备&#34;&gt;认知准备&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这次是安装一个业务系统(WordPress) , 所以不象一些 hello world 的文章, 更多要关注底层的一些东西&lt;/li&gt;&#xA;&lt;li&gt;网络(network): WordPress 要和 mysql 连接, 所以需要网络支持&lt;/li&gt;&#xA;&lt;li&gt;数据卷(volume): mysql 数据要保存, WordPress 的文章数据保存在数据库中,但是插件/主题,上传图片等都是保存在文件系统中, 文件系统的内容要保存下来, 就要使用到数据卷功能.&lt;/li&gt;&#xA;&lt;li&gt;使用 Podman 4.1.0 版本&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;&#xA;&lt;h3 id=&#34;网络&#34;&gt;网络&lt;/h3&gt;&#xA;&lt;p&gt;使用 podman network ls , 可以查看 Podman 的网络列表, 默认会有一个 Podman 的网络, 这里我们会创建一个新的网络叫做 &lt;code&gt;wp-net&lt;/code&gt; , 使用如下命令:&lt;/p&gt;</description>
    </item>
    <item>
      <title>一次简单的 rust 爬虫开发技术调研</title>
      <link>https://liangdi.me/posts/simple-rust-crawler-technology-research/</link>
      <pubDate>Fri, 06 May 2022 00:38:25 +0800</pubDate>
      <guid>https://liangdi.me/posts/simple-rust-crawler-technology-research/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;看到标题,是不是觉得我疯了,爬虫,这个时间点应该还轮不到 rust 吧!&lt;/p&gt;&#xA;&lt;p&gt;确实,现在成熟的爬虫技术基本使用 python, java 等,那么这篇文章的用意是什么呢? 我先来交代一下背景, 2017 年,我挖了一个坑:&#xA;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24900305&#34;&gt;https://zhuanlan.zhihu.com/p/24900305&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这个项目后来商用了,所以就不方便继续更新, 到了现在 2022 年了, 各种技术已经迭代了好多次, 那么,我也要重新思考一下一套新的爬虫架构了,这套架构基于云原生,容器化,结合不同语言取长补短,相互配合,简单概括如下:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;爬虫节点容器运行,语言无关,所以会支持 python ,java 等各语言开发的爬虫&lt;/li&gt;&#xA;&lt;li&gt;统一的 DAG 任务分发调度节点&lt;/li&gt;&#xA;&lt;li&gt;统一的数据集接口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;其中一点是爬虫语言无关,所以会设计统一的输入输出接口,让各语言编写的程序都能在容器中执行, python, java, golang 的爬虫生态都很不错了,文章也很多, rust 这方面比较少,所以这里就写一篇 rust 的文章.&lt;/p&gt;&#xA;&lt;h2 id=&#34;爬虫底层关注的技术点&#34;&gt;爬虫底层关注的技术点&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;http 库&lt;/li&gt;&#xA;&lt;li&gt;html 解析&lt;/li&gt;&#xA;&lt;li&gt;json 解析&lt;/li&gt;&#xA;&lt;li&gt;WebDriver 集成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;http-库&#34;&gt;http 库&lt;/h2&gt;&#xA;&lt;p&gt;作为爬虫的 http 库, 只要支持 http 协议基本就 ok, 主要是设置 header, 设置 cookies, 设置代理等等.&lt;/p&gt;&#xA;&lt;p&gt;rust 的 http 库列表 &lt;a href=&#34;https://lib.rs/web-programming/http-client&#34;&gt;https://lib.rs/web-programming/http-client&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这里使用 reqwest 做个简单的示例&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; reqwest;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; http::{HeaderMap, HeaderValue, header::{&lt;span style=&#34;color:#66d9ef&#34;&gt;COOKIE&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;USER_AGENT&lt;/span&gt;}};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[tokio::main]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()  -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(),reqwest::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// HTML&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://ssr1.scrape.center/&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reqwest::get(url).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Response: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{:?}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, resp.version(), resp.status());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Headers: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{:#?}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, resp.headers());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//println!(&amp;#34;Body:{:#?}&amp;#34;,resp.text().await?);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// JSON&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://spa1.scrape.center/api/movie/?limit=10&amp;amp;offset=0&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reqwest::get(url).&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; json_body:&lt;span style=&#34;color:#a6e22e&#34;&gt;serde_json&lt;/span&gt;::Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp.json().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Json:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{:#?}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,json_body);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// POST&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; _resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reqwest::Client::new()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .post(url)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .form(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;[(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;)])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .send()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Header&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; _resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reqwest::Client::new()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .post(url)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Auth&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .send()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// UserAgent Cookies&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reqwest::Client::builder()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .cookie_store(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;).build().unwrap();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HeaderMap::new();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    headers.insert(&lt;span style=&#34;color:#66d9ef&#34;&gt;COOKIE&lt;/span&gt;, HeaderValue::from_str(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key=value&amp;#34;&lt;/span&gt;).unwrap());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    headers.insert(&lt;span style=&#34;color:#66d9ef&#34;&gt;USER_AGENT&lt;/span&gt;,HeaderValue::from_str(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my user-agent&amp;#34;&lt;/span&gt;).unwrap());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; _reps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client.get(url)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .headers(headers)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .send()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Ok(())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cargo.toml&lt;/p&gt;</description>
    </item>
    <item>
      <title>选择 podman 的理由, 以及它和 Kubernetes , Docker 的区别</title>
      <link>https://liangdi.me/posts/what-is-podman-and-different-from-kubernetes-and-docker/</link>
      <pubDate>Wed, 27 Apr 2022 16:30:35 +0800</pubDate>
      <guid>https://liangdi.me/posts/what-is-podman-and-different-from-kubernetes-and-docker/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;大家好,我是 Liangdi, podman 4.x 版本已经发布了, 我也从 docker 开始向 podman 迁移, 所以是合适的时候写点 podman 的文章了.&lt;/p&gt;&#xA;&lt;h2 id=&#34;podman-是什么&#34;&gt;podman 是什么&lt;/h2&gt;&#xA;&lt;p&gt;官方网站: &lt;a href=&#34;https://podman.io&#34;&gt;podman.io&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;官方自己的介绍: &lt;a href=&#34;https://podman.io/whatis.html&#34;&gt;https://podman.io/whatis.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;名称 &lt;code&gt;podman&lt;/code&gt; ,官方说明是 &lt;code&gt;Pod Manager&lt;/code&gt; , 所以它不仅可以管理 OCI 容器,还可以管理 pod , 这也是和 docker 的最大差别吧.&lt;/p&gt;&#xA;&lt;h2 id=&#34;和-kubernetes-的区别&#34;&gt;和 kubernetes 的区别&lt;/h2&gt;&#xA;&lt;p&gt;kubernetes(k8s) 是目前最流行的容器编排工具, 集群管理工具, 生态很完善, 也很&lt;code&gt;&amp;quot;重&amp;quot;&lt;/code&gt;, pod 的概念就来自 k8s , 虽然 podman 也是管理 pod, 但是远远不及 k8s 的编排功能, 同时 podman 也没有集群管理功能,如果需要管理集群, 需要第三方工具完成.&lt;/p&gt;&#xA;&lt;p&gt;所以 podman 定位也不是编排和集群管理工具, 紧紧是一个 pod 和容器的管理工具. 所以不是一个级别的东西, 这里不做太多的比较.&lt;/p&gt;&#xA;&lt;h2 id=&#34;和-docker-的区别&#34;&gt;和 docker 的区别&lt;/h2&gt;&#xA;&lt;p&gt;如果仅仅从 &lt;code&gt;docker&lt;/code&gt; 和 &lt;code&gt;podman&lt;/code&gt; 两个命令提供的功能来讲,它们功能交集很大, podman 官方甚至推荐 &lt;code&gt;alias docker=podman&lt;/code&gt; 来过渡.&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录一次 java 小项目的 rust 迁移过程</title>
      <link>https://liangdi.me/posts/a-tiny-app-migrate-from-java-to-rust/</link>
      <pubDate>Tue, 26 Apr 2022 11:06:35 +0800</pubDate>
      <guid>https://liangdi.me/posts/a-tiny-app-migrate-from-java-to-rust/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;使用 rust 也挺长时间了,但是一直是内部小打小闹,没有往客户那边推, 这次和客户商量好,拿一个很小的 java spring boot 项目开刀.&lt;/p&gt;&#xA;&lt;p&gt;这个项目小到 tiny 级别, 主要功能是: 请求一个服务, 对数据进行业务逻辑处理后, 使用 freemarker 渲染呈现给终端用户, rest api 也就 10 多个.&lt;/p&gt;&#xA;&lt;h2 id=&#34;迁移准备&#34;&gt;迁移准备&lt;/h2&gt;&#xA;&lt;p&gt;首先,业务逻辑使用 rust 实现,肯定是没有大问题, 关键在于一些中间件和第三方库是否有替代,这样可以让运维或者交付更加平滑一点, 由于项目比较简单,第三方库也很通用,基本在 rust 这边也有对等的选择,所以本次迁移也将会简单很多.&lt;/p&gt;&#xA;&lt;h2 id=&#34;迁移说明&#34;&gt;迁移说明&lt;/h2&gt;&#xA;&lt;h3 id=&#34;库和中间件迁移&#34;&gt;库和中间件迁移&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;库/中间件&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Rust 版本&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Java 版本&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;备注&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Web Framework&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;actix-web 4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Spring Boot 2.6.x&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;http cleint&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;reqwest&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;jdk 11 HttpClient&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;json&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;serde_json&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;gson&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;template&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;tera&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;freemarker&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;logging&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;log4rs&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;spring boot logging&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;assets embedded&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;rust-embed&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;spring boot static&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;配置&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;dotenv&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;spring boot&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;项目小, 配置需求不高, dotenv 够用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;有没有坑&#34;&gt;有没有坑?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于项目实在不复杂, 过程中也没有遇到特别的问题, rust 的库也能正常工作, 从代码的角度很多时候比 java 简洁, 当然集成没有 spring boot 那么简单, 比如配置的自动读取赋值, 模板需要手动集成等等.&lt;/li&gt;&#xA;&lt;li&gt;spring boot 的 rest request 配置, 对应在 actix-web 中也是很简单,使用 #[get], #[post] 等宏实现, 请求内容的解构也一样完善, 迁移过程中没有遇到什么问题.&lt;/li&gt;&#xA;&lt;li&gt;模板方面, &lt;code&gt;tera&lt;/code&gt; 是 &lt;code&gt;Jinja2/Django&lt;/code&gt; like 的所以,使用起来也没有什么障碍.&lt;/li&gt;&#xA;&lt;li&gt;战胜 rust 编译器后,程序运行,完成测试没有遇到什么 bug !&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;迁移后的变化&#34;&gt;迁移后的变化&lt;/h2&gt;&#xA;&lt;h3 id=&#34;程序尺寸&#34;&gt;程序尺寸&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;spring boot jar 大小 20MB, 即使是 spring-native 打包也要 60 多 mb, 并且 spring-native 打包的程序没法正常运行,因为 spring-native 还没有 GA ,所以也没有去深究.&lt;/li&gt;&#xA;&lt;li&gt;rust 的程序使用 &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; target release 静态编译打包(默认配置,无其他优化), 程序 strip 后是 9.3MB , 相比 jar 也小了一半, 还没考虑 jdk.&lt;/li&gt;&#xA;&lt;li&gt;容器化, 这点 rust 的优势就体现出来了, 使用 &lt;code&gt;FROM scratch&lt;/code&gt; 打包出来的镜像大小是 9.75MB , 相比 spring boot 项目, 基本的 openjdk:17-alpine 就有 320 多 MB 加上项目程序,也要 340 多 MB 了.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;性能&#34;&gt;性能&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;肉眼可见的启动块了, 模板渲染也快了&lt;/li&gt;&#xA;&lt;li&gt;程序瓶颈在于远程的服务,所以当前程序性能测试并不一定可靠,所以并没有去做特别的测试&lt;/li&gt;&#xA;&lt;li&gt;后续迁移更多项目后,再进行一次性能测试比较&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;思考&#34;&gt;思考&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果项目不复杂, java 迁移到 rust 还是不算复杂的.&lt;/li&gt;&#xA;&lt;li&gt;容器化的收益是不小的,不管是启动速度还是镜像大小.&lt;/li&gt;&#xA;&lt;li&gt;后面考虑将微服务化的 java 项目选择合适的项目再进行 rust 迁移.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>渐进式云原生实践: 使用 podman 容器化你的应用</title>
      <link>https://liangdi.me/posts/progressive-cloud-native-with-podman/</link>
      <pubDate>Sat, 23 Apr 2022 16:59:14 +0800</pubDate>
      <guid>https://liangdi.me/posts/progressive-cloud-native-with-podman/</guid>
      <description>&lt;h2 id=&#34;何为云原生&#34;&gt;何为云原生&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;&lt;code&gt;云原生&lt;/code&gt;一词可谓是大红大紫, 老板见面不说一下都觉得落伍了,技术人员更是要与时俱进,学习这&lt;code&gt;一系列&lt;/code&gt;的新技术&lt;/p&gt;&#xA;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;先看看 &lt;a href=&#34;cncf.io&#34;&gt;CNCF&lt;/a&gt; 对云原生的最新定义,注意&lt;code&gt;云原生&lt;/code&gt;的定义一直是演进的,随着新技术,新架构的发展,定义也会变化.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。&lt;/p&gt;&#xA;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。&lt;/p&gt;&#xA;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;以上这两段话来自 CNCF 的&lt;a href=&#34;https://github.com/cncf/toc/blob/main/DEFINITION.md#%E4%B8%AD%E6%96%87%E7%89%88%E6%9C%AC&#34;&gt;云原生定义&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;简单的说就是用各种技术实现了大多数人梦寐以求的理想系统方案!&lt;/p&gt;&#xA;&lt;p&gt;但是,如果一个传统技术栈的团队,要向&lt;code&gt;云原生&lt;/code&gt;迁移,代价会是多大呢? 这是个值得思考的问题.&lt;/p&gt;&#xA;&lt;p&gt;CNCF 有两个子站点 &lt;a href=&#34;https://glossary.cncf.io/&#34;&gt;https://glossary.cncf.io/&lt;/a&gt; 和 &lt;a href=&#34;https://landscape.cncf.io/&#34;&gt;https://landscape.cncf.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这两个站点可以大致了解&lt;code&gt;云原生&lt;/code&gt;涉及到新概念以及生态图谱, 如此多的概念和繁杂的生态,对于传统技术团队来说将会带来额外的心智负担以及新的挑战.&lt;/p&gt;&#xA;&lt;h2 id=&#34;渐进式云原生&#34;&gt;渐进式云原生&lt;/h2&gt;&#xA;&lt;p&gt;因此针对我们小团队以及小部门,我提出了&lt;code&gt;渐进式云原生&lt;/code&gt; 和 &lt;code&gt;轻量化云原生&lt;/code&gt; 的概念,以便云原生落地.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;渐进式云原生&lt;/code&gt; 是指自下往上,分阶段完成云原生迁移和落地. 这里大概会包含 &lt;code&gt;容器化&lt;/code&gt;, &lt;code&gt;微服务化&lt;/code&gt; , &lt;code&gt;DevOps&lt;/code&gt; ,&lt;code&gt;CI/DI&lt;/code&gt; 等方面向云端迁移, 而且不强调顺序, 实际的顺序大多数根团队的技术栈相关.&lt;/p&gt;&#xA;&lt;p&gt;所以这系列应该不会出现一来就叫你部署一套 &lt;code&gt;k8s&lt;/code&gt; 集群, 可能到最后也不会,而是取决于你自己的选择.&lt;/p&gt;&#xA;&lt;p&gt;这一系列就是一次渐进式云原生的实践,废话一大推,我们进入正题&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用-podman-容器化你的应用&#34;&gt;使用 podman 容器化你的应用&lt;/h2&gt;&#xA;&lt;p&gt;第一篇是&lt;code&gt;使用 podman 容器化你的应用&lt;/code&gt; , 我认为容器化是迈向云原生过程中最简单的部分, 技术也成熟,风险不大. 这里为什么选择 &lt;code&gt;podman&lt;/code&gt; ,详谈的话,需要再开一篇文章.&lt;/p&gt;&#xA;&lt;h3 id=&#34;实践目标&#34;&gt;实践目标&lt;/h3&gt;&#xA;&lt;p&gt;将一个传统的项目 CentOS -&amp;gt; Nginx -&amp;gt; (Spring Boot, MySQL, Redis) 容器化&lt;/p&gt;&#xA;&lt;p&gt;原项目是一个不算复杂的 Spring Boot 应用, 由于 Java 没法热更新, 所以使用 Nginx 反向代理了两套 Spring Boot 应用(两套应用可以同时运行也可以只运行一套), 关键时刻可实现用户无感知更新.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Archives</title>
      <link>https://liangdi.me/pages/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      <guid>https://liangdi.me/pages/archives/</guid>
      <description></description>
    </item>
    <item>
      <title>Search</title>
      <link>https://liangdi.me/pages/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://liangdi.me/pages/search/</guid>
      <description></description>
    </item>
  </channel>
</rss>
