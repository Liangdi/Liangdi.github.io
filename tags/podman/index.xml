<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Podman on Liangdi&#39;s个人博客</title>
    <link>https://liangdi.me/tags/podman/</link>
    <description>Recent content in Podman on Liangdi&#39;s个人博客</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 02 Jun 2022 12:37:58 +0800</lastBuildDate>
    <atom:link href="https://liangdi.me/tags/podman/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Podman 运行 WordPress 6 Arturo</title>
      <link>https://liangdi.me/posts/run-wordpress-6-arturo-with-podman/</link>
      <pubDate>Thu, 02 Jun 2022 12:37:58 +0800</pubDate>
      <guid>https://liangdi.me/posts/run-wordpress-6-arturo-with-podman/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;今天看到 WordPress 6 &lt;a href=&#34;https://wordpress.org/news/2022/05/arturo/&#34;&gt;发布&lt;/a&gt;了,回想多年以前在使用 WordPress 的时候,一顿 yum 命令安装 nginx, php, mysql, php-fpm , 然后再配置 nginx, 经过一阵子配置, WordPress 就运行成功了, 如今在云原生时代, 可以用 k8s , docker , Podman 等工具来安装这些系统了, 今天就使用 Podman 安装 WordPress , 人生苦短, 我用 podman !&lt;/p&gt;&#xA;&lt;h2 id=&#34;认知准备&#34;&gt;认知准备&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这次是安装一个业务系统(WordPress) , 所以不象一些 hello world 的文章, 更多要关注底层的一些东西&lt;/li&gt;&#xA;&lt;li&gt;网络(network): WordPress 要和 mysql 连接, 所以需要网络支持&lt;/li&gt;&#xA;&lt;li&gt;数据卷(volume): mysql 数据要保存, WordPress 的文章数据保存在数据库中,但是插件/主题,上传图片等都是保存在文件系统中, 文件系统的内容要保存下来, 就要使用到数据卷功能.&lt;/li&gt;&#xA;&lt;li&gt;使用 Podman 4.1.0 版本&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;&#xA;&lt;h3 id=&#34;网络&#34;&gt;网络&lt;/h3&gt;&#xA;&lt;p&gt;使用 podman network ls , 可以查看 Podman 的网络列表, 默认会有一个 Podman 的网络, 这里我们会创建一个新的网络叫做 &lt;code&gt;wp-net&lt;/code&gt; , 使用如下命令:&lt;/p&gt;</description>
    </item>
    <item>
      <title>选择 podman 的理由, 以及它和 Kubernetes , Docker 的区别</title>
      <link>https://liangdi.me/posts/what-is-podman-and-different-from-kubernetes-and-docker/</link>
      <pubDate>Wed, 27 Apr 2022 16:30:35 +0800</pubDate>
      <guid>https://liangdi.me/posts/what-is-podman-and-different-from-kubernetes-and-docker/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;大家好,我是 Liangdi, podman 4.x 版本已经发布了, 我也从 docker 开始向 podman 迁移, 所以是合适的时候写点 podman 的文章了.&lt;/p&gt;&#xA;&lt;h2 id=&#34;podman-是什么&#34;&gt;podman 是什么&lt;/h2&gt;&#xA;&lt;p&gt;官方网站: &lt;a href=&#34;https://podman.io&#34;&gt;podman.io&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;官方自己的介绍: &lt;a href=&#34;https://podman.io/whatis.html&#34;&gt;https://podman.io/whatis.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;名称 &lt;code&gt;podman&lt;/code&gt; ,官方说明是 &lt;code&gt;Pod Manager&lt;/code&gt; , 所以它不仅可以管理 OCI 容器,还可以管理 pod , 这也是和 docker 的最大差别吧.&lt;/p&gt;&#xA;&lt;h2 id=&#34;和-kubernetes-的区别&#34;&gt;和 kubernetes 的区别&lt;/h2&gt;&#xA;&lt;p&gt;kubernetes(k8s) 是目前最流行的容器编排工具, 集群管理工具, 生态很完善, 也很&lt;code&gt;&amp;quot;重&amp;quot;&lt;/code&gt;, pod 的概念就来自 k8s , 虽然 podman 也是管理 pod, 但是远远不及 k8s 的编排功能, 同时 podman 也没有集群管理功能,如果需要管理集群, 需要第三方工具完成.&lt;/p&gt;&#xA;&lt;p&gt;所以 podman 定位也不是编排和集群管理工具, 紧紧是一个 pod 和容器的管理工具. 所以不是一个级别的东西, 这里不做太多的比较.&lt;/p&gt;&#xA;&lt;h2 id=&#34;和-docker-的区别&#34;&gt;和 docker 的区别&lt;/h2&gt;&#xA;&lt;p&gt;如果仅仅从 &lt;code&gt;docker&lt;/code&gt; 和 &lt;code&gt;podman&lt;/code&gt; 两个命令提供的功能来讲,它们功能交集很大, podman 官方甚至推荐 &lt;code&gt;alias docker=podman&lt;/code&gt; 来过渡.&lt;/p&gt;</description>
    </item>
    <item>
      <title>渐进式云原生实践: 使用 podman 容器化你的应用</title>
      <link>https://liangdi.me/posts/progressive-cloud-native-with-podman/</link>
      <pubDate>Sat, 23 Apr 2022 16:59:14 +0800</pubDate>
      <guid>https://liangdi.me/posts/progressive-cloud-native-with-podman/</guid>
      <description>&lt;h2 id=&#34;何为云原生&#34;&gt;何为云原生&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;&lt;code&gt;云原生&lt;/code&gt;一词可谓是大红大紫, 老板见面不说一下都觉得落伍了,技术人员更是要与时俱进,学习这&lt;code&gt;一系列&lt;/code&gt;的新技术&lt;/p&gt;&#xA;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;先看看 &lt;a href=&#34;cncf.io&#34;&gt;CNCF&lt;/a&gt; 对云原生的最新定义,注意&lt;code&gt;云原生&lt;/code&gt;的定义一直是演进的,随着新技术,新架构的发展,定义也会变化.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。&lt;/p&gt;&#xA;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。&lt;/p&gt;&#xA;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;以上这两段话来自 CNCF 的&lt;a href=&#34;https://github.com/cncf/toc/blob/main/DEFINITION.md#%E4%B8%AD%E6%96%87%E7%89%88%E6%9C%AC&#34;&gt;云原生定义&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;简单的说就是用各种技术实现了大多数人梦寐以求的理想系统方案!&lt;/p&gt;&#xA;&lt;p&gt;但是,如果一个传统技术栈的团队,要向&lt;code&gt;云原生&lt;/code&gt;迁移,代价会是多大呢? 这是个值得思考的问题.&lt;/p&gt;&#xA;&lt;p&gt;CNCF 有两个子站点 &lt;a href=&#34;https://glossary.cncf.io/&#34;&gt;https://glossary.cncf.io/&lt;/a&gt; 和 &lt;a href=&#34;https://landscape.cncf.io/&#34;&gt;https://landscape.cncf.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这两个站点可以大致了解&lt;code&gt;云原生&lt;/code&gt;涉及到新概念以及生态图谱, 如此多的概念和繁杂的生态,对于传统技术团队来说将会带来额外的心智负担以及新的挑战.&lt;/p&gt;&#xA;&lt;h2 id=&#34;渐进式云原生&#34;&gt;渐进式云原生&lt;/h2&gt;&#xA;&lt;p&gt;因此针对我们小团队以及小部门,我提出了&lt;code&gt;渐进式云原生&lt;/code&gt; 和 &lt;code&gt;轻量化云原生&lt;/code&gt; 的概念,以便云原生落地.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;渐进式云原生&lt;/code&gt; 是指自下往上,分阶段完成云原生迁移和落地. 这里大概会包含 &lt;code&gt;容器化&lt;/code&gt;, &lt;code&gt;微服务化&lt;/code&gt; , &lt;code&gt;DevOps&lt;/code&gt; ,&lt;code&gt;CI/DI&lt;/code&gt; 等方面向云端迁移, 而且不强调顺序, 实际的顺序大多数根团队的技术栈相关.&lt;/p&gt;&#xA;&lt;p&gt;所以这系列应该不会出现一来就叫你部署一套 &lt;code&gt;k8s&lt;/code&gt; 集群, 可能到最后也不会,而是取决于你自己的选择.&lt;/p&gt;&#xA;&lt;p&gt;这一系列就是一次渐进式云原生的实践,废话一大推,我们进入正题&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用-podman-容器化你的应用&#34;&gt;使用 podman 容器化你的应用&lt;/h2&gt;&#xA;&lt;p&gt;第一篇是&lt;code&gt;使用 podman 容器化你的应用&lt;/code&gt; , 我认为容器化是迈向云原生过程中最简单的部分, 技术也成熟,风险不大. 这里为什么选择 &lt;code&gt;podman&lt;/code&gt; ,详谈的话,需要再开一篇文章.&lt;/p&gt;&#xA;&lt;h3 id=&#34;实践目标&#34;&gt;实践目标&lt;/h3&gt;&#xA;&lt;p&gt;将一个传统的项目 CentOS -&amp;gt; Nginx -&amp;gt; (Spring Boot, MySQL, Redis) 容器化&lt;/p&gt;&#xA;&lt;p&gt;原项目是一个不算复杂的 Spring Boot 应用, 由于 Java 没法热更新, 所以使用 Nginx 反向代理了两套 Spring Boot 应用(两套应用可以同时运行也可以只运行一套), 关键时刻可实现用户无感知更新.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
