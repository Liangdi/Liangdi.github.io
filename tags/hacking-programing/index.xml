<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hacking Programing on Liangdi&#39;s个人博客</title>
    <link>https://liangdi.me/tags/hacking-programing/</link>
    <description>Recent content in Hacking Programing on Liangdi&#39;s个人博客</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 03 Jun 2022 16:01:32 +0800</lastBuildDate>
    <atom:link href="https://liangdi.me/tags/hacking-programing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust 黑客编程 - SYN Flood 敲开 DDoS 的大门</title>
      <link>https://liangdi.me/posts/rust-hacking-programing-syn-flood-ddos/</link>
      <pubDate>Fri, 03 Jun 2022 16:01:32 +0800</pubDate>
      <guid>https://liangdi.me/posts/rust-hacking-programing-syn-flood-ddos/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;DDoS 介绍: &lt;a href=&#34;https://www.cloudflare.com/zh-cn/learning/ddos/what-is-a-ddos-attack/&#34;&gt;https://www.cloudflare.com/zh-cn/learning/ddos/what-is-a-ddos-attack/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果黑客攻击技术有层次之分, 那么 DDoS 攻击可以比喻为: 花钱请了一堆打手,攻击目标, 没有什么技术含量又有效果,目标也要付出不少成本才能防护的了.&lt;/p&gt;&#xA;&lt;p&gt;那 Rust 能编写 DDoS 软件吗? 答案当然是可以的,基本上所有语言都可以编写.&lt;/p&gt;&#xA;&lt;p&gt;DDoS 工具说到底就是充分利用了网络协议的标准, 然后不讲道理恶意利用而以. 第一个 D, distributed , 分布式, 就不在我们今天内容的范畴了, 后面将结合其他内容一起写.&lt;/p&gt;&#xA;&lt;p&gt;DDoS 攻击大多数发生在 3,4,7 层网络, SYN Flood 就是在 TCP 协议上实现的.&lt;/p&gt;&#xA;&lt;h2 id=&#34;syn-flood-原理&#34;&gt;SYN Flood 原理&lt;/h2&gt;&#xA;&lt;p&gt;SYN Flood 介绍: &lt;a href=&#34;https://www.cloudflare.com/zh-cn/learning/ddos/syn-flood-ddos-attack/&#34;&gt;https://www.cloudflare.com/zh-cn/learning/ddos/syn-flood-ddos-attack/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;SYN 洪水攻击主要是利用 TCP 协议握手规则, 大致就是不停的只伸手, 就不和对方握手,导致对方一直准备着和你握手, 就没法完成其他正常的握手动作了.&lt;/p&gt;&#xA;&lt;p&gt;那丛技术实现原理来看, 就是不停的构建 TCP-SYN 数据包,发给目标 IP 地址, 对于目标响应的 SYN/ACK 信息不做处理, 甚至是伪造发送端 IP ,使得目标将响应的 SYN/ACK 发送到其他 IP 地址去.&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;还是使用 pnet 库 (基于 pcap)&lt;/li&gt;&#xA;&lt;li&gt;尝试伪造 IP (伪造 IP 对于公网 ISP 服务商基本都限制了,可以在内网实现).&lt;/li&gt;&#xA;&lt;li&gt;TCP 协议就不展开讲了.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;编码实现&#34;&gt;编码实现&lt;/h2&gt;&#xA;&lt;p&gt;创建项目, 并且添加基本以来 cargo add 的功能来自 cargo-edit 这个项目, 如果系统没有,可以使用 cargo install cargo-edit 安装该功能&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 黑客编程 - ICMP 协议 ping 的简单实现</title>
      <link>https://liangdi.me/posts/rust-hacking-programing-icmp-ping/</link>
      <pubDate>Thu, 02 Jun 2022 19:30:20 +0800</pubDate>
      <guid>https://liangdi.me/posts/rust-hacking-programing-icmp-ping/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;记得在高中时期打开终端, ping 一个 IP ,这个操作在别人面前就会引来仰望大神的目光.&lt;/p&gt;&#xA;&lt;p&gt;后来知道了底层是 ICMP 协议,然后就没有然后了, 仅停留在知道的层面, 入坑 Rust 以来,也没有什么特别的项目去做, 就从这方面入手,重温一下高中时期学习&amp;quot;黑客&amp;quot;技术时的热情,毕竟兴趣是最好的老师!&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;p&gt;Rust 网络操作的库,不算很多, 这里使用 pnet 这个库,基于 pcap.&lt;/p&gt;&#xA;&lt;p&gt;测试抓包工具使用 wireshark&lt;/p&gt;&#xA;&lt;h2 id=&#34;预备知识&#34;&gt;预备知识&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Wiki 参考: &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%8E%A7%E5%88%B6%E6%B6%88%E6%81%AF%E5%8D%8F%E8%AE%AE&#34;&gt;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%8E%A7%E5%88%B6%E6%B6%88%E6%81%AF%E5%8D%8F%E8%AE%AE&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;ICMP 协议属于 3 层网络, 包含在 IP 数据包中, 所以我们要构建的数据包格式: IP头部|ICMP头部|ICMP数据&lt;/li&gt;&#xA;&lt;li&gt;ICMP 报文使用 Type 和 Code 的组合区分不同的类型&lt;/li&gt;&#xA;&lt;li&gt;根据 Wiki 的说明, 程序将使用 Type = 0 的数据包(Echo Reply) 和 Type = 8 的数据包 (Echo Request)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/icmp.png&#34; alt=&#34;ICMP&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这里我们使用 IPv4 协议&lt;/p&gt;&#xA;&lt;h2 id=&#34;实现思路&#34;&gt;实现思路&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pnet 可以实现 2,3,4 层的数据包操作&lt;/li&gt;&#xA;&lt;li&gt;pnet 提供了各层数据包的协议的封装&lt;/li&gt;&#xA;&lt;li&gt;在此应用中,可以使用 &lt;code&gt;transport_channel&lt;/code&gt; 创建网络的通讯通道,使用其 rx 接收数据包, tx 发送数据包.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;编码实现&#34;&gt;编码实现&lt;/h2&gt;&#xA;&lt;p&gt;创建项目, 并且添加基本以来 cargo add 的功能来自 cargo-edit 这个项目, 如果系统没有,可以使用 cargo install cargo-edit 安装该功能&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
